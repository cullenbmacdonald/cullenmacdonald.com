<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cullen MacDonald</title>
    <link>https://cullenmacdonald.com/</link>
    <description>Recent content on Cullen MacDonald</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://cullenmacdonald.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>On Agility</title>
      <link>https://cullenmacdonald.com/agility/</link>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://cullenmacdonald.com/agility/</guid>
      <description>&lt;p&gt;We spend so much time focusing on how our teams can be agile. There are methods and books and classes and certificates and tons of arguments online about the pros and cons of one way versus another. Whats the point of agility? Why is agility the goal? Are you sure you actually want that?&lt;/p&gt;&#xA;&lt;p&gt;Theres some fear around moving Not Fast Enough among software teams. Someone else will beat you! Theres also the reality that you probably work for a company that is spending more money than it is bringing in, so every day you spend time on the Wrong Thing, every sprint you “miss” by a couple days, every quarter where you don’t hit the sales numbers or don’t ship that feature is gone and you’re now one quarter closer to having no more money. &lt;/p&gt;</description>
    </item>
    <item>
      <title>Value Based Velocity</title>
      <link>https://cullenmacdonald.com/value-based-velocity/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://cullenmacdonald.com/value-based-velocity/</guid>
      <description>&lt;p&gt;Ok so we want to measure our velocity in terms of value shipped, but how do you do that? Here is one such way. I encourage you to to take this and create a new sprint process for your team or (better yet) fit it into your current process.&lt;/p&gt;&#xA;&lt;p&gt;Core concepts:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Value&lt;/strong&gt; - Measured in t-shirt sizes (S, M, L) and in relation to other possible things we could be working on. We don’t mean “value to the customer.” You don’t have to do any mental trickery and tell yourself “this internal user is the customer!!!” No, we think value in terms of Value to the Business. You believe some new feature is the missing item to get a big group of new customers in the door? Sure that&amp;rsquo;s valuable. Improvements to some tool operations uses prevents them from making mistakes or wanting to quit and open a coffee shop upstate? Seems valuable to me. Some refactor lets us build future features faster and better? That&amp;rsquo;s value. Can you can articulate some work that prevents engineers from sitting around for hours a week? That&amp;rsquo;s very high value considering engineers are a fairly high cost center to the business; giving them hours back a week is huge! Thinking this way lets you compare and contrast all units of work on the equal footing, removing the problem of Tech Debt vs Feature Work.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Effort&lt;/strong&gt; - Ok right off the bat I gotta be honest. I hate &lt;a href=&#34;https://cullenmacdonald.com/velocity-and-story-points&#34;&gt;story points&lt;/a&gt;. I hate how much time teams spend arguing about whether a ticket is a 3 or a 5. I hate how much anxiety comes from making sure you have pulled enough story points into a sprint. I hate how story points is an estimation of complexity or effort about a ticket and then we use that to measure how productive we are being. Basically, I hate how much emotional energy is lost to the heat sink that is story points. That being said, effort is still important to think about. We use effort, also measured in T-shirt sizes relative to the other thinks we could be working on, as a way to make sure we’re working on the right stuff or spending the right amount of effort for the resulting value.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;“Cullen what the heck,” you say, “You haven&amp;rsquo;t talked about velocity at all yet.” If you have read &lt;a href=&#34;https://cullenmacdonald.com/velocity-and-story-points&#34;&gt;this&lt;/a&gt; you’ll remember that I made an argument that velocity should be a measurement of impact, not of effort. Let’s take our vocabulary and generate some metrics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How We Code Review</title>
      <link>https://cullenmacdonald.com/how-we-code-review/</link>
      <pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://cullenmacdonald.com/how-we-code-review/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;This has been written and rewritten a couple times for a handful of different teams. Consider it a starting place/template&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;All of our engineering work makes it to production by first passing through a code review. No line of code is too small or inconsequential to bypass this part of our product lifecycle. We should be aiming for quick turn around on code review and merging/deploying. Firstly, it feels great to have momentum on work. Secondly, it prevents existing work from getting stale, rotting away in a PR. But most importantly, work isn’t done until it is merged, so helping your coworkers get their things across the line is the most important thing you can be doing!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Velocity and Story Points</title>
      <link>https://cullenmacdonald.com/velocity-and-story-points/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://cullenmacdonald.com/velocity-and-story-points/</guid>
      <description>&lt;p&gt;Right now in (zoom) conference rooms across the globe, some engineering manager or product manager is talking about, defending, or setting goals around Velocity. The engineers in the room are playing along, maybe debating the pros and cons of using Fibonacci or T-Shirt sizes as the metric by which they declare the “story points” of planned work. At the same time, sometimes in the same room, product managers or company leadership is asking for a description of upcoming work in terms of “milestones” and an estimate (and commitment!) for when the upcoming work will be completed. The meeting ends and everyone agrees and then deadlines are missed, scope is cut, tech debt is ignored, and shortcuts are taken to get the desired product changes into production sooner. So what happened? Where is the disconnect between engineering velocity and shipping The Thing?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bottlenecks and Pull Requests</title>
      <link>https://cullenmacdonald.com/bottlenecks-and-pull-requests/</link>
      <pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://cullenmacdonald.com/bottlenecks-and-pull-requests/</guid>
      <description>&lt;p&gt;Let me start by saying my thinking is actually more of a belief. There is some pseudo science and anecdata baked in, but it&amp;rsquo;s more based on gut checks than any cold hard facts. Bad news for you, changing someone’s belief is harder than changing someone’s thinking based on fact. Worse news for you: this is belief ive had about teams and git process for like 8 years lol.&lt;/p&gt;&#xA;&lt;p&gt;I have two main goals with my process things. 1. engineering morale fueled by real felt delivery, progress, impact, unblocked-ness, etc. and 2. Consistency of team delivery (even over shipping a lot). funnily enough, consistency, in my experience on many teams, is one of the easiest ways to improve engineering morale.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Things To Follow</title>
      <link>https://cullenmacdonald.com/things-to-follow/</link>
      <pubDate>Sat, 27 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://cullenmacdonald.com/things-to-follow/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;Getting PR’s merged and deployed takes a higher priority than coding&lt;/li&gt;&#xA;&lt;li&gt;A ticket is not done until it is in prod&lt;/li&gt;&#xA;&lt;li&gt;An epic is not done until all tickets in the epic are done&lt;/li&gt;&#xA;&lt;li&gt;A feature is not done until a customer is using it.&lt;/li&gt;&#xA;&lt;li&gt;Engineers shouldn’t have more than two Jira tickets in progress (in progress, in review, waiting for merge) at a time &lt;/li&gt;&#xA;&lt;li&gt;One Jira ticket = One PR&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If you find yourself needing to open a second PR, take a little extra time to make a separate ticket for the second PR.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;All PRs must target &lt;code&gt;main&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;why? Read this: &lt;a href=&#34;https://cullenmacdonald.com/bottlenecks-and-pull-requests&#34;&gt;Bottlenecks and Pull Requests&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;No free floating tickets. all tickets are part of an epic&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Joanna Honikman: &amp;ldquo;if it’s not in Jira, it’s not happening. I’ve seen teams do a bunch of &amp;lsquo;quick&amp;rsquo; things saying, &amp;lsquo;We don’t need a ticket…&amp;rsquo; only to find they did 20 &amp;lsquo;quick&amp;rsquo; things and nothing else. If it’s important enough to do instead of all the other work, it should be in a ticket, and it should roll up to something tangible.&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Product managers are the arbiters of whether an epic contains enough value on its own to be an epic or not. (may not be correct)&lt;/li&gt;&#xA;&lt;li&gt;Squads set weekly epic delivery goals. (one epic per week eg). The goal is consistency however small, even over end-of-quarter massive goals being hit. Consistency is the easiest path to predictability. (momentum, trust, ease of planning). - All tickets from an epic should be brought into the sprint. &lt;/li&gt;&#xA;&lt;li&gt;Big projects getting to 95% done by Friday are worthless. a small project to 100% done by the end of the week is everything. (hyperbolic…)&lt;/li&gt;&#xA;&lt;li&gt;We don’t use story points on tickets.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;why? Read this: &lt;a href=&#34;https://cullenmacdonald.com/velocity-and-story-points&#34;&gt;Velocity and Story Points&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;No ticket should be estimated to take longer than three business days to merge. &#xA;&lt;ul&gt;&#xA;&lt;li&gt;If you have a ticket that takes longer than three days, figure out how to get what youve done so far merged, and make a new ticket for the rest. Try to avoid “one more day and then &lt;em&gt;today&lt;/em&gt; it gets merged. &lt;/li&gt;&#xA;&lt;li&gt;A PR with a single concept is much easier to review accurately &amp;amp; quickly than one with several things all smooshed together even if they are part of the same feature. Atomic commits are also very, very helpful for reviewers.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
